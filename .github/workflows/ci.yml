name: CI

on:
  pull_request:
    branches:
      - develop

permissions:
  contents: write
  packages: write
  pull-requests: write
  actions: write
  checks: write
  deployments: write
  issues: write
  discussions: write
  repository-projects: write
  security-events: write
  statuses: write

jobs:
  test_chatbot:
    name: 🤖 Test Chatbot
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python 3.10.14
        uses: actions/setup-python@v5
        with:
          python-version: '3.10.14'

      - name: 📚 Install dependencies
        run: |
          cd chatbot
          pip install -r requirements.txt

      - name: 🧪 Run unit tests
        run: |
          export PYTHONPATH="${PYTHONPATH}:./app:./tests"
          cd chatbot
          pytest -p no:warnings tests/

      - name: 📝 Print summary
        run: |
          echo "✅ Checkout code"
          echo "✅ Install dependencies"
          echo "✅ Run unit tests"

  codacy-security-scan:
    name: 🛡️ Codacy Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🕵️‍♀️ Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@master
        with:
          output: results.sarif
          format: sarif
          gh-code-scanning-compat: true
          max-allowed-issues: 2147483647

      - name: 📤 Upload SARIF results file
        uses: github/codeql-action/upload-sarif@main
        with:
          sarif_file: results.sarif

  trivy-docker-image-scan:
    name: 🐳 Trivy Docker Image Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Build Docker image
        run: |
          cd chatbot
          docker build -t my-app .

      - name: 🛡️ Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'my-app'
          format: 'template'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@main
        with:
          sarif_file: 'trivy-results.sarif'

  snyk_scan:
    name: 🔍 Snyk Code Security Check
    runs-on: ubuntu-latest
    continue-on-error: true # TODO: Revisit this
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python 3.10.14
        uses: actions/setup-python@v5
        with:
          python-version: '3.10.14'

      - name: 📚 Install dependencies
        run: |
          cd chatbot
          pip install -r requirements.txt

      - name: 🛡️ Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: 📤 Upload Snyk scan results
        uses: github/codeql-action/upload-sarif@main
        with:
          sarif_file: 'snyk-results.sarif'


  quality-checks:
    needs: [ codacy-security-scan, trivy-docker-image-scan, snyk_scan ]
    name: 🔍 Quality Checks with Bandit, Black, Pylint
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Check out code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python 3.10.14
        uses: actions/setup-python@v5
        with:
          python-version: '3.10.14'

      - name: 📦 Install dependencies
        run: |
          cd chatbot
          pip install -r requirements.txt

      - name: 🎨 Format code with black
        run: black --check chatbot/

      - name: 🔒 Security check with bandit
        run: bandit -r chatbot/

      - name: 🧹 Lint with pylint
        run: |
          export PYTHONPATH="${PYTHONPATH}:./chatbot/app:./chatbot/tests"
          pylint chatbot/ | tee pylint_output.log

      - name: 📊 Check pylint score
        run: |
          score=$(grep -oP 'Your code has been rated at \K[0-9.]+' pylint_output.log)
          if (( $(echo "$score < 9" | bc -l) )); then
            echo "Pylint score is less than 9"
            exit 1
          fi