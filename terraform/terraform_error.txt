ce5-capstone-project/terraform on ÓÇ† feature/ALB-23-CD-Chatbot-app-Api-app-infra-Terraform-staging [$!?] via üêç v3.10.0 (.venv2) via üí† default on ‚òÅÔ∏è  (us-east-1) took 5h21m57s
‚ùØ terraform init

Initializing the backend...
Initializing modules...

Initializing provider plugins...
- Reusing previous version of hashicorp/time from the dependency lock file
- Reusing previous version of hashicorp/null from the dependency lock file
- Reusing previous version of hashicorp/cloudinit from the dependency lock file
- Reusing previous version of hashicorp/kubernetes from the dependency lock file
- Reusing previous version of hashicorp/aws from the dependency lock file
- Reusing previous version of hashicorp/tls from the dependency lock file
- Using previously-installed hashicorp/kubernetes v1.13.4
- Using previously-installed hashicorp/aws v5.52.0
- Using previously-installed hashicorp/tls v4.0.5
- Using previously-installed hashicorp/time v0.11.2
- Using previously-installed hashicorp/null v3.2.2
- Using previously-installed hashicorp/cloudinit v2.3.4

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

ce5-capstone-project/terraform on ÓÇ† feature/ALB-23-CD-Chatbot-app-Api-app-infra-Terraform-staging [$!?] via üêç v3.10.0 (.venv2) via üí† default on ‚òÅÔ∏è  (us-east-1) took 2s
‚ùØ terraform plan
module.eks.module.kms.data.aws_partition.current[0]: Reading...
module.eks.data.aws_caller_identity.current: Reading...
module.eks.data.aws_partition.current: Reading...
module.eks.module.eks_managed_node_group["eks_nodes"].data.aws_partition.current: Reading...
module.eks.module.eks_managed_node_group["eks_nodes"].data.aws_caller_identity.current: Reading...
module.eks.module.kms.data.aws_caller_identity.current[0]: Reading...
module.eks.data.aws_iam_policy_document.assume_role_policy[0]: Reading...
module.eks.data.aws_partition.current: Read complete after 0s [id=aws]
module.eks.module.eks_managed_node_group["eks_nodes"].data.aws_partition.current: Read complete after 0s [id=aws]
module.eks.module.kms.data.aws_partition.current[0]: Read complete after 0s [id=aws]
module.eks.data.aws_iam_policy_document.assume_role_policy[0]: Read complete after 0s [id=2764486067]
module.eks.module.eks_managed_node_group["eks_nodes"].data.aws_iam_policy_document.assume_role_policy[0]: Reading...
module.eks.module.eks_managed_node_group["eks_nodes"].data.aws_iam_policy_document.assume_role_policy[0]: Read complete after 0s [id=2560088296]
module.eks.data.aws_caller_identity.current: Read complete after 0s [id=255945442255]
module.eks.data.aws_iam_session_context.current: Reading...
module.eks.data.aws_iam_session_context.current: Read complete after 0s [id=arn:aws:iam::255945442255:user/albertleng]
module.eks.module.kms.data.aws_caller_identity.current[0]: Read complete after 1s [id=255945442255]
module.eks.module.eks_managed_node_group["eks_nodes"].data.aws_caller_identity.current: Read complete after 1s [id=255945442255]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  # aws_ecr_repository.chatbot will be created
  + resource "aws_ecr_repository" "chatbot" {
      + arn                  = (known after apply)
      + id                   = (known after apply)
      + image_tag_mutability = "MUTABLE"
      + name                 = "ce5-group6-chatbot-app"
      + registry_id          = (known after apply)
      + repository_url       = (known after apply)
      + tags_all             = (known after apply)
    }

  # aws_ecr_repository.sentiment_analysis will be created
  + resource "aws_ecr_repository" "sentiment_analysis" {
      + arn                  = (known after apply)
      + id                   = (known after apply)
      + image_tag_mutability = "MUTABLE"
      + name                 = "ce5-group6-sentiment-analysis-api"
      + registry_id          = (known after apply)
      + repository_url       = (known after apply)
      + tags_all             = (known after apply)
    }

  # aws_subnet.ce5-group6-subnet-1 will be created
  + resource "aws_subnet" "ce5-group6-subnet-1" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "ce5-group6-subnet-1"
        }
      + tags_all                                       = {
          + "Name" = "ce5-group6-subnet-1"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.ce5-group6-subnet-2 will be created
  + resource "aws_subnet" "ce5-group6-subnet-2" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "ce5-group6-subnet-2"
        }
      + tags_all                                       = {
          + "Name" = "ce5-group6-subnet-2"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_vpc.ce5-group6-vpc will be created
  + resource "aws_vpc" "ce5-group6-vpc" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name" = "ce5-group6-vpc"
        }
      + tags_all                             = {
          + "Name" = "ce5-group6-vpc"
        }
    }

  # kubernetes_deployment.chatbot will be created
  + resource "kubernetes_deployment" "chatbot" {
      + id               = (known after apply)
      + wait_for_rollout = true

      + metadata {
          + generation       = (known after apply)
          + name             = "chatbot"
          + namespace        = "default"
          + resource_version = (known after apply)
          + self_link        = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + min_ready_seconds         = 0
          + paused                    = false
          + progress_deadline_seconds = 600
          + replicas                  = 3
          + revision_history_limit    = 10

          + selector {
              + match_labels = {
                  + "App" = "chatbot"
                }
            }

          + template {
              + metadata {
                  + generation       = (known after apply)
                  + labels           = {
                      + "App" = "chatbot"
                    }
                  + name             = (known after apply)
                  + resource_version = (known after apply)
                  + self_link        = (known after apply)
                  + uid              = (known after apply)
                }
              + spec {
                  + dns_policy                       = "ClusterFirst"
                  + enable_service_links             = true
                  + host_ipc                         = false
                  + host_network                     = false
                  + host_pid                         = false
                  + hostname                         = (known after apply)
                  + node_name                        = (known after apply)
                  + restart_policy                   = "Always"
                  + service_account_name             = (known after apply)
                  + share_process_namespace          = false
                  + termination_grace_period_seconds = 30

                  + container {
                      + image                      = "your-account-id.dkr.ecr.region.amazonaws.com/chatbot-app:latest"
                      + image_pull_policy          = (known after apply)
                      + name                       = "chatbot"
                      + stdin                      = false
                      + stdin_once                 = false
                      + termination_message_path   = "/dev/termination-log"
                      + termination_message_policy = (known after apply)
                      + tty                        = false
                    }
                }
            }
        }
    }

  # kubernetes_deployment.sentiment_analysis will be created
  + resource "kubernetes_deployment" "sentiment_analysis" {
      + id               = (known after apply)
      + wait_for_rollout = true

      + metadata {
          + generation       = (known after apply)
          + name             = "sentiment-analysis"
          + namespace        = "default"
          + resource_version = (known after apply)
          + self_link        = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + min_ready_seconds         = 0
          + paused                    = false
          + progress_deadline_seconds = 600
          + replicas                  = 3
          + revision_history_limit    = 10

          + selector {
              + match_labels = {
                  + "App" = "sentiment-analysis"
                }
            }

          + template {
              + metadata {
                  + generation       = (known after apply)
                  + labels           = {
                      + "App" = "sentiment-analysis"
                    }
                  + name             = (known after apply)
                  + resource_version = (known after apply)
                  + self_link        = (known after apply)
                  + uid              = (known after apply)
                }
              + spec {
                  + dns_policy                       = "ClusterFirst"
                  + enable_service_links             = true
                  + host_ipc                         = false
                  + host_network                     = false
                  + host_pid                         = false
                  + hostname                         = (known after apply)
                  + node_name                        = (known after apply)
                  + restart_policy                   = "Always"
                  + service_account_name             = (known after apply)
                  + share_process_namespace          = false
                  + termination_grace_period_seconds = 30

                  + container {
                      + image                      = "your-account-id.dkr.ecr.region.amazonaws.com/sentiment-analysis-api:latest"
                      + image_pull_policy          = (known after apply)
                      + name                       = "sentiment-analysis"
                      + stdin                      = false
                      + stdin_once                 = false
                      + termination_message_path   = "/dev/termination-log"
                      + termination_message_policy = (known after apply)
                      + tty                        = false
                    }
                }
            }
        }
    }

  # module.eks.data.tls_certificate.this[0] will be read during apply
  # (config refers to values not yet known)
 <= data "tls_certificate" "this" {
      + certificates = (known after apply)
      + id           = (known after apply)
      + url          = (known after apply)
    }

  # module.eks.aws_cloudwatch_log_group.this[0] will be created
  + resource "aws_cloudwatch_log_group" "this" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + log_group_class   = (known after apply)
      + name              = "/aws/eks/ce5-group6-eks-cluster/cluster"
      + name_prefix       = (known after apply)
      + retention_in_days = 90
      + skip_destroy      = false
      + tags              = {
          + "Environment" = "dev"
          + "Name"        = "/aws/eks/ce5-group6-eks-cluster/cluster"
          + "Terraform"   = "true"
        }
      + tags_all          = {
          + "Environment" = "dev"
          + "Name"        = "/aws/eks/ce5-group6-eks-cluster/cluster"
          + "Terraform"   = "true"
        }
    }

  # module.eks.aws_ec2_tag.cluster_primary_security_group["Environment"] will be created
  + resource "aws_ec2_tag" "cluster_primary_security_group" {
      + id          = (known after apply)
      + key         = "Environment"
      + resource_id = (known after apply)
      + value       = "dev"
    }

  # module.eks.aws_ec2_tag.cluster_primary_security_group["Terraform"] will be created
  + resource "aws_ec2_tag" "cluster_primary_security_group" {
      + id          = (known after apply)
      + key         = "Terraform"
      + resource_id = (known after apply)
      + value       = "true"
    }

  # module.eks.aws_eks_cluster.this[0] will be created
  + resource "aws_eks_cluster" "this" {
      + arn                       = (known after apply)
      + certificate_authority     = (known after apply)
      + cluster_id                = (known after apply)
      + created_at                = (known after apply)
      + enabled_cluster_log_types = [
          + "api",
          + "audit",
          + "authenticator",
        ]
      + endpoint                  = (known after apply)
      + id                        = (known after apply)
      + identity                  = (known after apply)
      + name                      = "ce5-group6-eks-cluster"
      + platform_version          = (known after apply)
      + role_arn                  = (known after apply)
      + status                    = (known after apply)
      + tags                      = {
          + "Environment"           = "dev"
          + "Terraform"             = "true"
          + "terraform-aws-modules" = "eks"
        }
      + tags_all                  = {
          + "Environment"           = "dev"
          + "Terraform"             = "true"
          + "terraform-aws-modules" = "eks"
        }
      + version                   = "1.30"

      + access_config {
          + authentication_mode                         = "API_AND_CONFIG_MAP"
          + bootstrap_cluster_creator_admin_permissions = false
        }

      + encryption_config {
          + resources = [
              + "secrets",
            ]

          + provider {
              + key_arn = (known after apply)
            }
        }

      + kubernetes_network_config {
          + ip_family         = "ipv4"
          + service_ipv4_cidr = (known after apply)
          + service_ipv6_cidr = (known after apply)
        }

      + timeouts {}

      + vpc_config {
          + cluster_security_group_id = (known after apply)
          + endpoint_private_access   = true
          + endpoint_public_access    = false
          + public_access_cidrs       = [
              + "0.0.0.0/0",
            ]
          + security_group_ids        = (known after apply)
          + subnet_ids                = (known after apply)
          + vpc_id                    = (known after apply)
        }
    }

  # module.eks.aws_iam_openid_connect_provider.oidc_provider[0] will be created
  + resource "aws_iam_openid_connect_provider" "oidc_provider" {
      + arn             = (known after apply)
      + client_id_list  = [
          + "sts.amazonaws.com",
        ]
      + id              = (known after apply)
      + tags            = {
          + "Environment" = "dev"
          + "Name"        = "ce5-group6-eks-cluster-eks-irsa"
          + "Terraform"   = "true"
        }
      + tags_all        = {
          + "Environment" = "dev"
          + "Name"        = "ce5-group6-eks-cluster-eks-irsa"
          + "Terraform"   = "true"
        }
      + thumbprint_list = (known after apply)
      + url             = (known after apply)
    }

  # module.eks.aws_iam_policy.cluster_encryption[0] will be created
  + resource "aws_iam_policy" "cluster_encryption" {
      + arn              = (known after apply)
      + attachment_count = (known after apply)
      + description      = "Cluster encryption policy to allow cluster role to utilize CMK provided"
      + id               = (known after apply)
      + name             = (known after apply)
      + name_prefix      = "ce5-group6-eks-cluster-cluster-ClusterEncryption"
      + path             = "/"
      + policy           = (known after apply)
      + policy_id        = (known after apply)
      + tags             = {
          + "Environment" = "dev"
          + "Terraform"   = "true"
        }
      + tags_all         = {
          + "Environment" = "dev"
          + "Terraform"   = "true"
        }
    }

  # module.eks.aws_iam_role.this[0] will be created
  + resource "aws_iam_role" "this" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "eks.amazonaws.com"
                        }
                      + Sid       = "EKSClusterAssumeRole"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = true
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = (known after apply)
      + name_prefix           = "ce5-group6-eks-cluster-cluster-"
      + path                  = "/"
      + tags                  = {
          + "Environment" = "dev"
          + "Terraform"   = "true"
        }
      + tags_all              = {
          + "Environment" = "dev"
          + "Terraform"   = "true"
        }
      + unique_id             = (known after apply)

      + inline_policy {
          + name   = "ce5-group6-eks-cluster-cluster"
          + policy = jsonencode(
                {
                  + Statement = [
                      + {
                          + Action   = [
                              + "logs:CreateLogGroup",
                            ]
                          + Effect   = "Deny"
                          + Resource = "*"
                        },
                    ]
                  + Version   = "2012-10-17"
                }
            )
        }
    }

  # module.eks.aws_iam_role_policy_attachment.cluster_encryption[0] will be created
  + resource "aws_iam_role_policy_attachment" "cluster_encryption" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = (known after apply)
    }

  # module.eks.aws_iam_role_policy_attachment.this["AmazonEKSClusterPolicy"] will be created
  + resource "aws_iam_role_policy_attachment" "this" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      + role       = (known after apply)
    }

  # module.eks.aws_iam_role_policy_attachment.this["AmazonEKSVPCResourceController"] will be created
  + resource "aws_iam_role_policy_attachment" "this" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController"
      + role       = (known after apply)
    }

  # module.eks.aws_security_group.cluster[0] will be created
  + resource "aws_security_group" "cluster" {
      + arn                    = (known after apply)
      + description            = "EKS cluster security group"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = (known after apply)
      + name_prefix            = "ce5-group6-eks-cluster-cluster-"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Environment" = "dev"
          + "Name"        = "ce5-group6-eks-cluster-cluster"
          + "Terraform"   = "true"
        }
      + tags_all               = {
          + "Environment" = "dev"
          + "Name"        = "ce5-group6-eks-cluster-cluster"
          + "Terraform"   = "true"
        }
      + vpc_id                 = (known after apply)
    }

  # module.eks.aws_security_group.node[0] will be created
  + resource "aws_security_group" "node" {
      + arn                    = (known after apply)
      + description            = "EKS node shared security group"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = (known after apply)
      + name_prefix            = "ce5-group6-eks-cluster-node-"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Environment"                                  = "dev"
          + "Name"                                         = "ce5-group6-eks-cluster-node"
          + "Terraform"                                    = "true"
          + "kubernetes.io/cluster/ce5-group6-eks-cluster" = "owned"
        }
      + tags_all               = {
          + "Environment"                                  = "dev"
          + "Name"                                         = "ce5-group6-eks-cluster-node"
          + "Terraform"                                    = "true"
          + "kubernetes.io/cluster/ce5-group6-eks-cluster" = "owned"
        }
      + vpc_id                 = (known after apply)
    }

  # module.eks.aws_security_group_rule.cluster["ingress_nodes_443"] will be created
  + resource "aws_security_group_rule" "cluster" {
      + description              = "Node groups to cluster API"
      + from_port                = 443
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 443
      + type                     = "ingress"
    }

  # module.eks.aws_security_group_rule.node["egress_all"] will be created
  + resource "aws_security_group_rule" "node" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + description              = "Allow all egress"
      + from_port                = 0
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "-1"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 0
      + type                     = "egress"
    }

  # module.eks.aws_security_group_rule.node["ingress_cluster_443"] will be created
  + resource "aws_security_group_rule" "node" {
      + description              = "Cluster API to node groups"
      + from_port                = 443
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 443
      + type                     = "ingress"
    }

  # module.eks.aws_security_group_rule.node["ingress_cluster_4443_webhook"] will be created
  + resource "aws_security_group_rule" "node" {
      + description              = "Cluster API to node 4443/tcp webhook"
      + from_port                = 4443
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 4443
      + type                     = "ingress"
    }

  # module.eks.aws_security_group_rule.node["ingress_cluster_6443_webhook"] will be created
  + resource "aws_security_group_rule" "node" {
      + description              = "Cluster API to node 6443/tcp webhook"
      + from_port                = 6443
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 6443
      + type                     = "ingress"
    }

  # module.eks.aws_security_group_rule.node["ingress_cluster_8443_webhook"] will be created
  + resource "aws_security_group_rule" "node" {
      + description              = "Cluster API to node 8443/tcp webhook"
      + from_port                = 8443
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 8443
      + type                     = "ingress"
    }

  # module.eks.aws_security_group_rule.node["ingress_cluster_9443_webhook"] will be created
  + resource "aws_security_group_rule" "node" {
      + description              = "Cluster API to node 9443/tcp webhook"
      + from_port                = 9443
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 9443
      + type                     = "ingress"
    }

  # module.eks.aws_security_group_rule.node["ingress_cluster_kubelet"] will be created
  + resource "aws_security_group_rule" "node" {
      + description              = "Cluster API to node kubelets"
      + from_port                = 10250
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 10250
      + type                     = "ingress"
    }

  # module.eks.aws_security_group_rule.node["ingress_nodes_ephemeral"] will be created
  + resource "aws_security_group_rule" "node" {
      + description              = "Node to node ingress on ephemeral ports"
      + from_port                = 1025
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = true
      + source_security_group_id = (known after apply)
      + to_port                  = 65535
      + type                     = "ingress"
    }

  # module.eks.aws_security_group_rule.node["ingress_self_coredns_tcp"] will be created
  + resource "aws_security_group_rule" "node" {
      + description              = "Node to node CoreDNS"
      + from_port                = 53
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = true
      + source_security_group_id = (known after apply)
      + to_port                  = 53
      + type                     = "ingress"
    }

  # module.eks.aws_security_group_rule.node["ingress_self_coredns_udp"] will be created
  + resource "aws_security_group_rule" "node" {
      + description              = "Node to node CoreDNS UDP"
      + from_port                = 53
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "udp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = true
      + source_security_group_id = (known after apply)
      + to_port                  = 53
      + type                     = "ingress"
    }

  # module.eks.time_sleep.this[0] will be created
  + resource "time_sleep" "this" {
      + create_duration = "30s"
      + id              = (known after apply)
      + triggers        = {
          + "cluster_certificate_authority_data" = (known after apply)
          + "cluster_endpoint"                   = (known after apply)
          + "cluster_name"                       = "ce5-group6-eks-cluster"
          + "cluster_service_cidr"               = (known after apply)
          + "cluster_version"                    = "1.30"
        }
    }

  # module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0] will be created
  + resource "aws_eks_node_group" "this" {
      + ami_type               = (known after apply)
      + arn                    = (known after apply)
      + capacity_type          = (known after apply)
      + cluster_name           = "ce5-group6-eks-cluster"
      + disk_size              = (known after apply)
      + id                     = (known after apply)
      + instance_types         = (known after apply)
      + node_group_name        = (known after apply)
      + node_group_name_prefix = "eks_nodes-"
      + node_role_arn          = (known after apply)
      + release_version        = (known after apply)
      + resources              = (known after apply)
      + status                 = (known after apply)
      + subnet_ids             = (known after apply)
      + tags                   = {
          + "Environment" = "dev"
          + "Name"        = "eks_nodes"
          + "Terraform"   = "true"
        }
      + tags_all               = {
          + "Environment" = "dev"
          + "Name"        = "eks_nodes"
          + "Terraform"   = "true"
        }
      + version                = "1.30"

      + launch_template {
          + id      = (known after apply)
          + name    = (known after apply)
          + version = (known after apply)
        }

      + scaling_config {
          + desired_size = 1
          + max_size     = 3
          + min_size     = 1
        }

      + timeouts {}

      + update_config {
          + max_unavailable_percentage = 33
        }
    }

  # module.eks.module.eks_managed_node_group["eks_nodes"].aws_iam_role.this[0] will be created
  + resource "aws_iam_role" "this" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                      + Sid       = "EKSNodeAssumeRole"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + description           = "EKS managed node group IAM role"
      + force_detach_policies = true
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = (known after apply)
      + name_prefix           = "eks_nodes-eks-node-group-"
      + path                  = "/"
      + tags                  = {
          + "Environment" = "dev"
          + "Terraform"   = "true"
        }
      + tags_all              = {
          + "Environment" = "dev"
          + "Terraform"   = "true"
        }
      + unique_id             = (known after apply)
    }

  # module.eks.module.eks_managed_node_group["eks_nodes"].aws_iam_role_policy_attachment.this["AmazonEC2ContainerRegistryReadOnly"] will be created
  + resource "aws_iam_role_policy_attachment" "this" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      + role       = (known after apply)
    }

  # module.eks.module.eks_managed_node_group["eks_nodes"].aws_iam_role_policy_attachment.this["AmazonEKSWorkerNodePolicy"] will be created
  + resource "aws_iam_role_policy_attachment" "this" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      + role       = (known after apply)
    }

  # module.eks.module.eks_managed_node_group["eks_nodes"].aws_iam_role_policy_attachment.this["AmazonEKS_CNI_Policy"] will be created
  + resource "aws_iam_role_policy_attachment" "this" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      + role       = (known after apply)
    }

  # module.eks.module.eks_managed_node_group["eks_nodes"].aws_launch_template.this[0] will be created
  + resource "aws_launch_template" "this" {
      + arn                    = (known after apply)
      + default_version        = (known after apply)
      + description            = "Custom launch template for eks_nodes EKS managed node group"
      + id                     = (known after apply)
      + key_name               = "ce5-group6-key"
      + latest_version         = (known after apply)
      + name                   = (known after apply)
      + name_prefix            = "eks_nodes-"
      + tags                   = {
          + "Environment" = "dev"
          + "Terraform"   = "true"
        }
      + tags_all               = {
          + "Environment" = "dev"
          + "Terraform"   = "true"
        }
      + update_default_version = true
      + vpc_security_group_ids = (known after apply)

      + metadata_options {
          + http_endpoint               = "enabled"
          + http_protocol_ipv6          = (known after apply)
          + http_put_response_hop_limit = 2
          + http_tokens                 = "required"
          + instance_metadata_tags      = (known after apply)
        }

      + monitoring {
          + enabled = true
        }

      + tag_specifications {
          + resource_type = "instance"
          + tags          = {
              + "Environment" = "dev"
              + "Name"        = "eks_nodes"
              + "Terraform"   = "true"
            }
        }
      + tag_specifications {
          + resource_type = "network-interface"
          + tags          = {
              + "Environment" = "dev"
              + "Name"        = "eks_nodes"
              + "Terraform"   = "true"
            }
        }
      + tag_specifications {
          + resource_type = "volume"
          + tags          = {
              + "Environment" = "dev"
              + "Name"        = "eks_nodes"
              + "Terraform"   = "true"
            }
        }
    }

  # module.eks.module.kms.data.aws_iam_policy_document.this[0] will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "this" {
      + id                        = (known after apply)
      + json                      = (known after apply)
      + minified_json             = (known after apply)
      + override_policy_documents = []
      + source_policy_documents   = []

      + statement {
          + actions   = [
              + "kms:*",
            ]
          + resources = [
              + "*",
            ]
          + sid       = "Default"

          + principals {
              + identifiers = [
                  + "arn:aws:iam::255945442255:root",
                ]
              + type        = "AWS"
            }
        }
      + statement {
          + actions   = [
              + "kms:CancelKeyDeletion",
              + "kms:Create*",
              + "kms:Delete*",
              + "kms:Describe*",
              + "kms:Disable*",
              + "kms:Enable*",
              + "kms:Get*",
              + "kms:ImportKeyMaterial",
              + "kms:List*",
              + "kms:Put*",
              + "kms:ReplicateKey",
              + "kms:Revoke*",
              + "kms:ScheduleKeyDeletion",
              + "kms:TagResource",
              + "kms:UntagResource",
              + "kms:Update*",
            ]
          + resources = [
              + "*",
            ]
          + sid       = "KeyAdministration"

          + principals {
              + identifiers = [
                  + "arn:aws:iam::255945442255:user/albertleng",
                ]
              + type        = "AWS"
            }
        }
      + statement {
          + actions   = [
              + "kms:Decrypt",
              + "kms:DescribeKey",
              + "kms:Encrypt",
              + "kms:GenerateDataKey*",
              + "kms:ReEncrypt*",
            ]
          + resources = [
              + "*",
            ]
          + sid       = "KeyUsage"

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "AWS"
            }
        }
    }

  # module.eks.module.kms.aws_kms_alias.this["cluster"] will be created
  + resource "aws_kms_alias" "this" {
      + arn            = (known after apply)
      + id             = (known after apply)
      + name           = "alias/eks/ce5-group6-eks-cluster"
      + name_prefix    = (known after apply)
      + target_key_arn = (known after apply)
      + target_key_id  = (known after apply)
    }

  # module.eks.module.kms.aws_kms_key.this[0] will be created
  + resource "aws_kms_key" "this" {
      + arn                                = (known after apply)
      + bypass_policy_lockout_safety_check = false
      + customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      + description                        = "ce5-group6-eks-cluster cluster encryption key"
      + enable_key_rotation                = true
      + id                                 = (known after apply)
      + is_enabled                         = true
      + key_id                             = (known after apply)
      + key_usage                          = "ENCRYPT_DECRYPT"
      + multi_region                       = false
      + policy                             = (known after apply)
      + rotation_period_in_days            = (known after apply)
      + tags                               = {
          + "Environment"           = "dev"
          + "Terraform"             = "true"
          + "terraform-aws-modules" = "eks"
        }
      + tags_all                           = {
          + "Environment"           = "dev"
          + "Terraform"             = "true"
          + "terraform-aws-modules" = "eks"
        }
    }

  # module.eks.module.eks_managed_node_group["eks_nodes"].module.user_data.null_resource.validate_cluster_service_cidr will be created
  + resource "null_resource" "validate_cluster_service_cidr" {
      + id = (known after apply)
    }

Plan: 40 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + cluster_endpoint = (known after apply)

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.

ce5-capstone-project/terraform on ÓÇ† feature/ALB-23-CD-Chatbot-app-Api-app-infra-Terraform-staging [$!?] via üêç v3.10.0 (.venv2) via üí† default on ‚òÅÔ∏è  (us-east-1) took 5s
‚ùØ terraform apply
module.eks.data.aws_iam_policy_document.assume_role_policy[0]: Reading...
module.eks.module.eks_managed_node_group["eks_nodes"].data.aws_iam_policy_document.assume_role_policy[0]: Reading...
module.eks.data.aws_caller_identity.current: Reading...
module.eks.module.kms.data.aws_caller_identity.current[0]: Reading...
module.eks.module.eks_managed_node_group["eks_nodes"].data.aws_caller_identity.current: Reading...
module.eks.data.aws_partition.current: Reading...
module.eks.data.aws_partition.current: Read complete after 0s [id=aws]
module.eks.data.aws_iam_policy_document.assume_role_policy[0]: Read complete after 0s [id=2764486067]
module.eks.module.eks_managed_node_group["eks_nodes"].data.aws_iam_policy_document.assume_role_policy[0]: Read complete after 0s [id=2560088296]
module.eks.module.kms.data.aws_partition.current[0]: Reading...
module.eks.module.eks_managed_node_group["eks_nodes"].data.aws_partition.current: Reading...
module.eks.module.kms.data.aws_partition.current[0]: Read complete after 0s [id=aws]
module.eks.module.eks_managed_node_group["eks_nodes"].data.aws_partition.current: Read complete after 0s [id=aws]
module.eks.data.aws_caller_identity.current: Read complete after 0s [id=255945442255]
module.eks.data.aws_iam_session_context.current: Reading...
module.eks.data.aws_iam_session_context.current: Read complete after 0s [id=arn:aws:iam::255945442255:user/albertleng]
module.eks.module.eks_managed_node_group["eks_nodes"].data.aws_caller_identity.current: Read complete after 1s [id=255945442255]
module.eks.module.kms.data.aws_caller_identity.current[0]: Read complete after 1s [id=255945442255]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  # aws_ecr_repository.chatbot will be created
  + resource "aws_ecr_repository" "chatbot" {
      + arn                  = (known after apply)
      + id                   = (known after apply)
      + image_tag_mutability = "MUTABLE"
      + name                 = "ce5-group6-chatbot-app"
      + registry_id          = (known after apply)
      + repository_url       = (known after apply)
      + tags_all             = (known after apply)
    }

  # aws_ecr_repository.sentiment_analysis will be created
  + resource "aws_ecr_repository" "sentiment_analysis" {
      + arn                  = (known after apply)
      + id                   = (known after apply)
      + image_tag_mutability = "MUTABLE"
      + name                 = "ce5-group6-sentiment-analysis-api"
      + registry_id          = (known after apply)
      + repository_url       = (known after apply)
      + tags_all             = (known after apply)
    }

  # aws_subnet.ce5-group6-subnet-1 will be created
  + resource "aws_subnet" "ce5-group6-subnet-1" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "ce5-group6-subnet-1"
        }
      + tags_all                                       = {
          + "Name" = "ce5-group6-subnet-1"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.ce5-group6-subnet-2 will be created
  + resource "aws_subnet" "ce5-group6-subnet-2" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "ce5-group6-subnet-2"
        }
      + tags_all                                       = {
          + "Name" = "ce5-group6-subnet-2"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_vpc.ce5-group6-vpc will be created
  + resource "aws_vpc" "ce5-group6-vpc" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name" = "ce5-group6-vpc"
        }
      + tags_all                             = {
          + "Name" = "ce5-group6-vpc"
        }
    }

  # kubernetes_deployment.chatbot will be created
  + resource "kubernetes_deployment" "chatbot" {
      + id               = (known after apply)
      + wait_for_rollout = true

      + metadata {
          + generation       = (known after apply)
          + name             = "chatbot"
          + namespace        = "default"
          + resource_version = (known after apply)
          + self_link        = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + min_ready_seconds         = 0
          + paused                    = false
          + progress_deadline_seconds = 600
          + replicas                  = 3
          + revision_history_limit    = 10

          + selector {
              + match_labels = {
                  + "App" = "chatbot"
                }
            }

          + template {
              + metadata {
                  + generation       = (known after apply)
                  + labels           = {
                      + "App" = "chatbot"
                    }
                  + name             = (known after apply)
                  + resource_version = (known after apply)
                  + self_link        = (known after apply)
                  + uid              = (known after apply)
                }
              + spec {
                  + dns_policy                       = "ClusterFirst"
                  + enable_service_links             = true
                  + host_ipc                         = false
                  + host_network                     = false
                  + host_pid                         = false
                  + hostname                         = (known after apply)
                  + node_name                        = (known after apply)
                  + restart_policy                   = "Always"
                  + service_account_name             = (known after apply)
                  + share_process_namespace          = false
                  + termination_grace_period_seconds = 30

                  + container {
                      + image                      = "your-account-id.dkr.ecr.region.amazonaws.com/chatbot-app:latest"
                      + image_pull_policy          = (known after apply)
                      + name                       = "chatbot"
                      + stdin                      = false
                      + stdin_once                 = false
                      + termination_message_path   = "/dev/termination-log"
                      + termination_message_policy = (known after apply)
                      + tty                        = false
                    }
                }
            }
        }
    }

  # kubernetes_deployment.sentiment_analysis will be created
  + resource "kubernetes_deployment" "sentiment_analysis" {
      + id               = (known after apply)
      + wait_for_rollout = true

      + metadata {
          + generation       = (known after apply)
          + name             = "sentiment-analysis"
          + namespace        = "default"
          + resource_version = (known after apply)
          + self_link        = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + min_ready_seconds         = 0
          + paused                    = false
          + progress_deadline_seconds = 600
          + replicas                  = 3
          + revision_history_limit    = 10

          + selector {
              + match_labels = {
                  + "App" = "sentiment-analysis"
                }
            }

          + template {
              + metadata {
                  + generation       = (known after apply)
                  + labels           = {
                      + "App" = "sentiment-analysis"
                    }
                  + name             = (known after apply)
                  + resource_version = (known after apply)
                  + self_link        = (known after apply)
                  + uid              = (known after apply)
                }
              + spec {
                  + dns_policy                       = "ClusterFirst"
                  + enable_service_links             = true
                  + host_ipc                         = false
                  + host_network                     = false
                  + host_pid                         = false
                  + hostname                         = (known after apply)
                  + node_name                        = (known after apply)
                  + restart_policy                   = "Always"
                  + service_account_name             = (known after apply)
                  + share_process_namespace          = false
                  + termination_grace_period_seconds = 30

                  + container {
                      + image                      = "your-account-id.dkr.ecr.region.amazonaws.com/sentiment-analysis-api:latest"
                      + image_pull_policy          = (known after apply)
                      + name                       = "sentiment-analysis"
                      + stdin                      = false
                      + stdin_once                 = false
                      + termination_message_path   = "/dev/termination-log"
                      + termination_message_policy = (known after apply)
                      + tty                        = false
                    }
                }
            }
        }
    }

  # module.eks.data.tls_certificate.this[0] will be read during apply
  # (config refers to values not yet known)
 <= data "tls_certificate" "this" {
      + certificates = (known after apply)
      + id           = (known after apply)
      + url          = (known after apply)
    }

  # module.eks.aws_cloudwatch_log_group.this[0] will be created
  + resource "aws_cloudwatch_log_group" "this" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + log_group_class   = (known after apply)
      + name              = "/aws/eks/ce5-group6-eks-cluster/cluster"
      + name_prefix       = (known after apply)
      + retention_in_days = 90
      + skip_destroy      = false
      + tags              = {
          + "Environment" = "dev"
          + "Name"        = "/aws/eks/ce5-group6-eks-cluster/cluster"
          + "Terraform"   = "true"
        }
      + tags_all          = {
          + "Environment" = "dev"
          + "Name"        = "/aws/eks/ce5-group6-eks-cluster/cluster"
          + "Terraform"   = "true"
        }
    }

  # module.eks.aws_ec2_tag.cluster_primary_security_group["Environment"] will be created
  + resource "aws_ec2_tag" "cluster_primary_security_group" {
      + id          = (known after apply)
      + key         = "Environment"
      + resource_id = (known after apply)
      + value       = "dev"
    }

  # module.eks.aws_ec2_tag.cluster_primary_security_group["Terraform"] will be created
  + resource "aws_ec2_tag" "cluster_primary_security_group" {
      + id          = (known after apply)
      + key         = "Terraform"
      + resource_id = (known after apply)
      + value       = "true"
    }

  # module.eks.aws_eks_cluster.this[0] will be created
  + resource "aws_eks_cluster" "this" {
      + arn                       = (known after apply)
      + certificate_authority     = (known after apply)
      + cluster_id                = (known after apply)
      + created_at                = (known after apply)
      + enabled_cluster_log_types = [
          + "api",
          + "audit",
          + "authenticator",
        ]
      + endpoint                  = (known after apply)
      + id                        = (known after apply)
      + identity                  = (known after apply)
      + name                      = "ce5-group6-eks-cluster"
      + platform_version          = (known after apply)
      + role_arn                  = (known after apply)
      + status                    = (known after apply)
      + tags                      = {
          + "Environment"           = "dev"
          + "Terraform"             = "true"
          + "terraform-aws-modules" = "eks"
        }
      + tags_all                  = {
          + "Environment"           = "dev"
          + "Terraform"             = "true"
          + "terraform-aws-modules" = "eks"
        }
      + version                   = "1.30"

      + access_config {
          + authentication_mode                         = "API_AND_CONFIG_MAP"
          + bootstrap_cluster_creator_admin_permissions = false
        }

      + encryption_config {
          + resources = [
              + "secrets",
            ]

          + provider {
              + key_arn = (known after apply)
            }
        }

      + kubernetes_network_config {
          + ip_family         = "ipv4"
          + service_ipv4_cidr = (known after apply)
          + service_ipv6_cidr = (known after apply)
        }

      + timeouts {}

      + vpc_config {
          + cluster_security_group_id = (known after apply)
          + endpoint_private_access   = true
          + endpoint_public_access    = false
          + public_access_cidrs       = [
              + "0.0.0.0/0",
            ]
          + security_group_ids        = (known after apply)
          + subnet_ids                = (known after apply)
          + vpc_id                    = (known after apply)
        }
    }

  # module.eks.aws_iam_openid_connect_provider.oidc_provider[0] will be created
  + resource "aws_iam_openid_connect_provider" "oidc_provider" {
      + arn             = (known after apply)
      + client_id_list  = [
          + "sts.amazonaws.com",
        ]
      + id              = (known after apply)
      + tags            = {
          + "Environment" = "dev"
          + "Name"        = "ce5-group6-eks-cluster-eks-irsa"
          + "Terraform"   = "true"
        }
      + tags_all        = {
          + "Environment" = "dev"
          + "Name"        = "ce5-group6-eks-cluster-eks-irsa"
          + "Terraform"   = "true"
        }
      + thumbprint_list = (known after apply)
      + url             = (known after apply)
    }

  # module.eks.aws_iam_policy.cluster_encryption[0] will be created
  + resource "aws_iam_policy" "cluster_encryption" {
      + arn              = (known after apply)
      + attachment_count = (known after apply)
      + description      = "Cluster encryption policy to allow cluster role to utilize CMK provided"
      + id               = (known after apply)
      + name             = (known after apply)
      + name_prefix      = "ce5-group6-eks-cluster-cluster-ClusterEncryption"
      + path             = "/"
      + policy           = (known after apply)
      + policy_id        = (known after apply)
      + tags             = {
          + "Environment" = "dev"
          + "Terraform"   = "true"
        }
      + tags_all         = {
          + "Environment" = "dev"
          + "Terraform"   = "true"
        }
    }

  # module.eks.aws_iam_role.this[0] will be created
  + resource "aws_iam_role" "this" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "eks.amazonaws.com"
                        }
                      + Sid       = "EKSClusterAssumeRole"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = true
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = (known after apply)
      + name_prefix           = "ce5-group6-eks-cluster-cluster-"
      + path                  = "/"
      + tags                  = {
          + "Environment" = "dev"
          + "Terraform"   = "true"
        }
      + tags_all              = {
          + "Environment" = "dev"
          + "Terraform"   = "true"
        }
      + unique_id             = (known after apply)

      + inline_policy {
          + name   = "ce5-group6-eks-cluster-cluster"
          + policy = jsonencode(
                {
                  + Statement = [
                      + {
                          + Action   = [
                              + "logs:CreateLogGroup",
                            ]
                          + Effect   = "Deny"
                          + Resource = "*"
                        },
                    ]
                  + Version   = "2012-10-17"
                }
            )
        }
    }

  # module.eks.aws_iam_role_policy_attachment.cluster_encryption[0] will be created
  + resource "aws_iam_role_policy_attachment" "cluster_encryption" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = (known after apply)
    }

  # module.eks.aws_iam_role_policy_attachment.this["AmazonEKSClusterPolicy"] will be created
  + resource "aws_iam_role_policy_attachment" "this" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      + role       = (known after apply)
    }

  # module.eks.aws_iam_role_policy_attachment.this["AmazonEKSVPCResourceController"] will be created
  + resource "aws_iam_role_policy_attachment" "this" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController"
      + role       = (known after apply)
    }

  # module.eks.aws_security_group.cluster[0] will be created
  + resource "aws_security_group" "cluster" {
      + arn                    = (known after apply)
      + description            = "EKS cluster security group"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = (known after apply)
      + name_prefix            = "ce5-group6-eks-cluster-cluster-"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Environment" = "dev"
          + "Name"        = "ce5-group6-eks-cluster-cluster"
          + "Terraform"   = "true"
        }
      + tags_all               = {
          + "Environment" = "dev"
          + "Name"        = "ce5-group6-eks-cluster-cluster"
          + "Terraform"   = "true"
        }
      + vpc_id                 = (known after apply)
    }

  # module.eks.aws_security_group.node[0] will be created
  + resource "aws_security_group" "node" {
      + arn                    = (known after apply)
      + description            = "EKS node shared security group"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = (known after apply)
      + name_prefix            = "ce5-group6-eks-cluster-node-"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Environment"                                  = "dev"
          + "Name"                                         = "ce5-group6-eks-cluster-node"
          + "Terraform"                                    = "true"
          + "kubernetes.io/cluster/ce5-group6-eks-cluster" = "owned"
        }
      + tags_all               = {
          + "Environment"                                  = "dev"
          + "Name"                                         = "ce5-group6-eks-cluster-node"
          + "Terraform"                                    = "true"
          + "kubernetes.io/cluster/ce5-group6-eks-cluster" = "owned"
        }
      + vpc_id                 = (known after apply)
    }

  # module.eks.aws_security_group_rule.cluster["ingress_nodes_443"] will be created
  + resource "aws_security_group_rule" "cluster" {
      + description              = "Node groups to cluster API"
      + from_port                = 443
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 443
      + type                     = "ingress"
    }

  # module.eks.aws_security_group_rule.node["egress_all"] will be created
  + resource "aws_security_group_rule" "node" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + description              = "Allow all egress"
      + from_port                = 0
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "-1"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 0
      + type                     = "egress"
    }

  # module.eks.aws_security_group_rule.node["ingress_cluster_443"] will be created
  + resource "aws_security_group_rule" "node" {
      + description              = "Cluster API to node groups"
      + from_port                = 443
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 443
      + type                     = "ingress"
    }

  # module.eks.aws_security_group_rule.node["ingress_cluster_4443_webhook"] will be created
  + resource "aws_security_group_rule" "node" {
      + description              = "Cluster API to node 4443/tcp webhook"
      + from_port                = 4443
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 4443
      + type                     = "ingress"
    }

  # module.eks.aws_security_group_rule.node["ingress_cluster_6443_webhook"] will be created
  + resource "aws_security_group_rule" "node" {
      + description              = "Cluster API to node 6443/tcp webhook"
      + from_port                = 6443
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 6443
      + type                     = "ingress"
    }

  # module.eks.aws_security_group_rule.node["ingress_cluster_8443_webhook"] will be created
  + resource "aws_security_group_rule" "node" {
      + description              = "Cluster API to node 8443/tcp webhook"
      + from_port                = 8443
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 8443
      + type                     = "ingress"
    }

  # module.eks.aws_security_group_rule.node["ingress_cluster_9443_webhook"] will be created
  + resource "aws_security_group_rule" "node" {
      + description              = "Cluster API to node 9443/tcp webhook"
      + from_port                = 9443
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 9443
      + type                     = "ingress"
    }

  # module.eks.aws_security_group_rule.node["ingress_cluster_kubelet"] will be created
  + resource "aws_security_group_rule" "node" {
      + description              = "Cluster API to node kubelets"
      + from_port                = 10250
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 10250
      + type                     = "ingress"
    }

  # module.eks.aws_security_group_rule.node["ingress_nodes_ephemeral"] will be created
  + resource "aws_security_group_rule" "node" {
      + description              = "Node to node ingress on ephemeral ports"
      + from_port                = 1025
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = true
      + source_security_group_id = (known after apply)
      + to_port                  = 65535
      + type                     = "ingress"
    }

  # module.eks.aws_security_group_rule.node["ingress_self_coredns_tcp"] will be created
  + resource "aws_security_group_rule" "node" {
      + description              = "Node to node CoreDNS"
      + from_port                = 53
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = true
      + source_security_group_id = (known after apply)
      + to_port                  = 53
      + type                     = "ingress"
    }

  # module.eks.aws_security_group_rule.node["ingress_self_coredns_udp"] will be created
  + resource "aws_security_group_rule" "node" {
      + description              = "Node to node CoreDNS UDP"
      + from_port                = 53
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "udp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = true
      + source_security_group_id = (known after apply)
      + to_port                  = 53
      + type                     = "ingress"
    }

  # module.eks.time_sleep.this[0] will be created
  + resource "time_sleep" "this" {
      + create_duration = "30s"
      + id              = (known after apply)
      + triggers        = {
          + "cluster_certificate_authority_data" = (known after apply)
          + "cluster_endpoint"                   = (known after apply)
          + "cluster_name"                       = "ce5-group6-eks-cluster"
          + "cluster_service_cidr"               = (known after apply)
          + "cluster_version"                    = "1.30"
        }
    }

  # module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0] will be created
  + resource "aws_eks_node_group" "this" {
      + ami_type               = (known after apply)
      + arn                    = (known after apply)
      + capacity_type          = (known after apply)
      + cluster_name           = "ce5-group6-eks-cluster"
      + disk_size              = (known after apply)
      + id                     = (known after apply)
      + instance_types         = (known after apply)
      + node_group_name        = (known after apply)
      + node_group_name_prefix = "eks_nodes-"
      + node_role_arn          = (known after apply)
      + release_version        = (known after apply)
      + resources              = (known after apply)
      + status                 = (known after apply)
      + subnet_ids             = (known after apply)
      + tags                   = {
          + "Environment" = "dev"
          + "Name"        = "eks_nodes"
          + "Terraform"   = "true"
        }
      + tags_all               = {
          + "Environment" = "dev"
          + "Name"        = "eks_nodes"
          + "Terraform"   = "true"
        }
      + version                = "1.30"

      + launch_template {
          + id      = (known after apply)
          + name    = (known after apply)
          + version = (known after apply)
        }

      + scaling_config {
          + desired_size = 1
          + max_size     = 3
          + min_size     = 1
        }

      + timeouts {}

      + update_config {
          + max_unavailable_percentage = 33
        }
    }

  # module.eks.module.eks_managed_node_group["eks_nodes"].aws_iam_role.this[0] will be created
  + resource "aws_iam_role" "this" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                      + Sid       = "EKSNodeAssumeRole"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + description           = "EKS managed node group IAM role"
      + force_detach_policies = true
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = (known after apply)
      + name_prefix           = "eks_nodes-eks-node-group-"
      + path                  = "/"
      + tags                  = {
          + "Environment" = "dev"
          + "Terraform"   = "true"
        }
      + tags_all              = {
          + "Environment" = "dev"
          + "Terraform"   = "true"
        }
      + unique_id             = (known after apply)
    }

  # module.eks.module.eks_managed_node_group["eks_nodes"].aws_iam_role_policy_attachment.this["AmazonEC2ContainerRegistryReadOnly"] will be created
  + resource "aws_iam_role_policy_attachment" "this" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      + role       = (known after apply)
    }

  # module.eks.module.eks_managed_node_group["eks_nodes"].aws_iam_role_policy_attachment.this["AmazonEKSWorkerNodePolicy"] will be created
  + resource "aws_iam_role_policy_attachment" "this" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      + role       = (known after apply)
    }

  # module.eks.module.eks_managed_node_group["eks_nodes"].aws_iam_role_policy_attachment.this["AmazonEKS_CNI_Policy"] will be created
  + resource "aws_iam_role_policy_attachment" "this" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      + role       = (known after apply)
    }

  # module.eks.module.eks_managed_node_group["eks_nodes"].aws_launch_template.this[0] will be created
  + resource "aws_launch_template" "this" {
      + arn                    = (known after apply)
      + default_version        = (known after apply)
      + description            = "Custom launch template for eks_nodes EKS managed node group"
      + id                     = (known after apply)
      + key_name               = "ce5-group6-key"
      + latest_version         = (known after apply)
      + name                   = (known after apply)
      + name_prefix            = "eks_nodes-"
      + tags                   = {
          + "Environment" = "dev"
          + "Terraform"   = "true"
        }
      + tags_all               = {
          + "Environment" = "dev"
          + "Terraform"   = "true"
        }
      + update_default_version = true
      + vpc_security_group_ids = (known after apply)

      + metadata_options {
          + http_endpoint               = "enabled"
          + http_protocol_ipv6          = (known after apply)
          + http_put_response_hop_limit = 2
          + http_tokens                 = "required"
          + instance_metadata_tags      = (known after apply)
        }

      + monitoring {
          + enabled = true
        }

      + tag_specifications {
          + resource_type = "instance"
          + tags          = {
              + "Environment" = "dev"
              + "Name"        = "eks_nodes"
              + "Terraform"   = "true"
            }
        }
      + tag_specifications {
          + resource_type = "network-interface"
          + tags          = {
              + "Environment" = "dev"
              + "Name"        = "eks_nodes"
              + "Terraform"   = "true"
            }
        }
      + tag_specifications {
          + resource_type = "volume"
          + tags          = {
              + "Environment" = "dev"
              + "Name"        = "eks_nodes"
              + "Terraform"   = "true"
            }
        }
    }

  # module.eks.module.kms.data.aws_iam_policy_document.this[0] will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "this" {
      + id                        = (known after apply)
      + json                      = (known after apply)
      + minified_json             = (known after apply)
      + override_policy_documents = []
      + source_policy_documents   = []

      + statement {
          + actions   = [
              + "kms:*",
            ]
          + resources = [
              + "*",
            ]
          + sid       = "Default"

          + principals {
              + identifiers = [
                  + "arn:aws:iam::255945442255:root",
                ]
              + type        = "AWS"
            }
        }
      + statement {
          + actions   = [
              + "kms:CancelKeyDeletion",
              + "kms:Create*",
              + "kms:Delete*",
              + "kms:Describe*",
              + "kms:Disable*",
              + "kms:Enable*",
              + "kms:Get*",
              + "kms:ImportKeyMaterial",
              + "kms:List*",
              + "kms:Put*",
              + "kms:ReplicateKey",
              + "kms:Revoke*",
              + "kms:ScheduleKeyDeletion",
              + "kms:TagResource",
              + "kms:UntagResource",
              + "kms:Update*",
            ]
          + resources = [
              + "*",
            ]
          + sid       = "KeyAdministration"

          + principals {
              + identifiers = [
                  + "arn:aws:iam::255945442255:user/albertleng",
                ]
              + type        = "AWS"
            }
        }
      + statement {
          + actions   = [
              + "kms:Decrypt",
              + "kms:DescribeKey",
              + "kms:Encrypt",
              + "kms:GenerateDataKey*",
              + "kms:ReEncrypt*",
            ]
          + resources = [
              + "*",
            ]
          + sid       = "KeyUsage"

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "AWS"
            }
        }
    }

  # module.eks.module.kms.aws_kms_alias.this["cluster"] will be created
  + resource "aws_kms_alias" "this" {
      + arn            = (known after apply)
      + id             = (known after apply)
      + name           = "alias/eks/ce5-group6-eks-cluster"
      + name_prefix    = (known after apply)
      + target_key_arn = (known after apply)
      + target_key_id  = (known after apply)
    }

  # module.eks.module.kms.aws_kms_key.this[0] will be created
  + resource "aws_kms_key" "this" {
      + arn                                = (known after apply)
      + bypass_policy_lockout_safety_check = false
      + customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      + description                        = "ce5-group6-eks-cluster cluster encryption key"
      + enable_key_rotation                = true
      + id                                 = (known after apply)
      + is_enabled                         = true
      + key_id                             = (known after apply)
      + key_usage                          = "ENCRYPT_DECRYPT"
      + multi_region                       = false
      + policy                             = (known after apply)
      + rotation_period_in_days            = (known after apply)
      + tags                               = {
          + "Environment"           = "dev"
          + "Terraform"             = "true"
          + "terraform-aws-modules" = "eks"
        }
      + tags_all                           = {
          + "Environment"           = "dev"
          + "Terraform"             = "true"
          + "terraform-aws-modules" = "eks"
        }
    }

  # module.eks.module.eks_managed_node_group["eks_nodes"].module.user_data.null_resource.validate_cluster_service_cidr will be created
  + resource "null_resource" "validate_cluster_service_cidr" {
      + id = (known after apply)
    }

Plan: 40 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + cluster_endpoint = (known after apply)

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

module.eks.aws_cloudwatch_log_group.this[0]: Creating...
aws_ecr_repository.chatbot: Creating...
aws_ecr_repository.sentiment_analysis: Creating...
module.eks.module.eks_managed_node_group["eks_nodes"].aws_iam_role.this[0]: Creating...
aws_vpc.ce5-group6-vpc: Creating...
module.eks.aws_iam_role.this[0]: Creating...
module.eks.aws_cloudwatch_log_group.this[0]: Creation complete after 2s [id=/aws/eks/ce5-group6-eks-cluster/cluster]
aws_ecr_repository.chatbot: Creation complete after 2s [id=ce5-group6-chatbot-app]
aws_ecr_repository.sentiment_analysis: Creation complete after 2s [id=ce5-group6-sentiment-analysis-api]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_iam_role.this[0]: Creation complete after 2s [id=eks_nodes-eks-node-group-20240602123750117100000001]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_iam_role_policy_attachment.this["AmazonEKS_CNI_Policy"]: Creating...
module.eks.module.eks_managed_node_group["eks_nodes"].aws_iam_role_policy_attachment.this["AmazonEKSWorkerNodePolicy"]: Creating...
module.eks.module.eks_managed_node_group["eks_nodes"].aws_iam_role_policy_attachment.this["AmazonEC2ContainerRegistryReadOnly"]: Creating...
module.eks.module.eks_managed_node_group["eks_nodes"].aws_iam_role_policy_attachment.this["AmazonEKS_CNI_Policy"]: Creation complete after 2s [id=eks_nodes-eks-node-group-20240602123750117100000001-20240602123752893500000003]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_iam_role_policy_attachment.this["AmazonEKSWorkerNodePolicy"]: Creation complete after 2s [id=eks_nodes-eks-node-group-20240602123750117100000001-20240602123752893500000004]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_iam_role_policy_attachment.this["AmazonEC2ContainerRegistryReadOnly"]: Creation complete after 2s [id=eks_nodes-eks-node-group-20240602123750117100000001-20240602123753242300000005]
module.eks.aws_iam_role.this[0]: Creation complete after 4s [id=ce5-group6-eks-cluster-cluster-20240602123750118000000002]
module.eks.aws_iam_role_policy_attachment.this["AmazonEKSVPCResourceController"]: Creating...
module.eks.aws_iam_role_policy_attachment.this["AmazonEKSClusterPolicy"]: Creating...
module.eks.module.kms.data.aws_iam_policy_document.this[0]: Reading...
module.eks.module.kms.data.aws_iam_policy_document.this[0]: Read complete after 0s [id=2529474881]
module.eks.module.kms.aws_kms_key.this[0]: Creating...
module.eks.aws_iam_role_policy_attachment.this["AmazonEKSClusterPolicy"]: Creation complete after 0s [id=ce5-group6-eks-cluster-cluster-20240602123750118000000002-20240602123753937800000007]
module.eks.aws_iam_role_policy_attachment.this["AmazonEKSVPCResourceController"]: Creation complete after 0s [id=ce5-group6-eks-cluster-cluster-20240602123750118000000002-20240602123753936100000006]
aws_vpc.ce5-group6-vpc: Still creating... [10s elapsed]
module.eks.module.kms.aws_kms_key.this[0]: Still creating... [10s elapsed]
aws_vpc.ce5-group6-vpc: Creation complete after 15s [id=vpc-08db4aafc25f72777]
aws_subnet.ce5-group6-subnet-2: Creating...
aws_subnet.ce5-group6-subnet-1: Creating...
module.eks.aws_security_group.node[0]: Creating...
module.eks.aws_security_group.cluster[0]: Creating...
aws_subnet.ce5-group6-subnet-2: Creation complete after 2s [id=subnet-02d97c24a117f30a5]
aws_subnet.ce5-group6-subnet-1: Creation complete after 2s [id=subnet-0fecd6e66050ee388]
module.eks.aws_security_group.node[0]: Creation complete after 4s [id=sg-045890695882b0978]
module.eks.aws_security_group.cluster[0]: Creation complete after 4s [id=sg-03864ca649c829c9b]
module.eks.aws_security_group_rule.cluster["ingress_nodes_443"]: Creating...
module.eks.aws_security_group_rule.node["ingress_cluster_6443_webhook"]: Creating...
module.eks.aws_security_group_rule.node["ingress_cluster_kubelet"]: Creating...
module.eks.aws_security_group_rule.node["ingress_cluster_9443_webhook"]: Creating...
module.eks.aws_security_group_rule.node["ingress_self_coredns_udp"]: Creating...
module.eks.aws_security_group_rule.node["egress_all"]: Creating...
module.eks.aws_security_group_rule.node["ingress_nodes_ephemeral"]: Creating...
module.eks.aws_security_group_rule.node["ingress_cluster_443"]: Creating...
module.eks.aws_security_group_rule.node["ingress_self_coredns_tcp"]: Creating...
module.eks.aws_security_group_rule.cluster["ingress_nodes_443"]: Creation complete after 2s [id=sgrule-2009751857]
module.eks.aws_security_group_rule.node["ingress_self_coredns_udp"]: Creation complete after 2s [id=sgrule-418002315]
module.eks.aws_security_group_rule.node["ingress_cluster_8443_webhook"]: Creating...
module.eks.aws_security_group_rule.node["ingress_cluster_4443_webhook"]: Creating...
module.eks.aws_security_group_rule.node["ingress_cluster_6443_webhook"]: Creation complete after 3s [id=sgrule-3718412597]
module.eks.aws_security_group_rule.node["ingress_cluster_443"]: Creation complete after 4s [id=sgrule-623136979]
module.eks.module.kms.aws_kms_key.this[0]: Still creating... [20s elapsed]
module.eks.aws_security_group_rule.node["ingress_self_coredns_tcp"]: Creation complete after 6s [id=sgrule-3166017124]
module.eks.aws_security_group_rule.node["ingress_cluster_kubelet"]: Creation complete after 7s [id=sgrule-299756936]
module.eks.aws_security_group_rule.node["ingress_cluster_9443_webhook"]: Creation complete after 8s [id=sgrule-2858383071]
module.eks.aws_security_group_rule.node["egress_all"]: Creation complete after 9s [id=sgrule-3664735484]
module.eks.aws_security_group_rule.node["ingress_nodes_ephemeral"]: Still creating... [10s elapsed]
module.eks.aws_security_group_rule.node["ingress_nodes_ephemeral"]: Creation complete after 11s [id=sgrule-2931785595]
module.eks.module.kms.aws_kms_key.this[0]: Creation complete after 26s [id=a09e591e-7fc8-432e-b6b8-450cff563383]
module.eks.module.kms.aws_kms_alias.this["cluster"]: Creating...
module.eks.aws_iam_policy.cluster_encryption[0]: Creating...
module.eks.aws_security_group_rule.node["ingress_cluster_4443_webhook"]: Still creating... [10s elapsed]
module.eks.aws_security_group_rule.node["ingress_cluster_8443_webhook"]: Still creating... [10s elapsed]
module.eks.module.kms.aws_kms_alias.this["cluster"]: Creation complete after 1s [id=alias/eks/ce5-group6-eks-cluster]
module.eks.aws_security_group_rule.node["ingress_cluster_4443_webhook"]: Creation complete after 10s [id=sgrule-350232227]
module.eks.aws_iam_policy.cluster_encryption[0]: Creation complete after 1s [id=arn:aws:iam::255945442255:policy/ce5-group6-eks-cluster-cluster-ClusterEncryption2024060212382018020000000a]
module.eks.aws_iam_role_policy_attachment.cluster_encryption[0]: Creating...
module.eks.aws_iam_role_policy_attachment.cluster_encryption[0]: Creation complete after 1s [id=ce5-group6-eks-cluster-cluster-20240602123750118000000002-2024060212382156530000000b]
module.eks.aws_security_group_rule.node["ingress_cluster_8443_webhook"]: Creation complete after 11s [id=sgrule-3472770324]
module.eks.aws_eks_cluster.this[0]: Creating...
module.eks.aws_eks_cluster.this[0]: Still creating... [10s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [20s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [30s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [40s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [50s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [1m0s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [1m10s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [1m20s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [1m30s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [1m40s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [1m50s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [2m0s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [2m10s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [2m20s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [2m30s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [2m40s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [2m50s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [3m0s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [3m10s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [3m20s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [3m30s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [3m40s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [3m50s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [4m0s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [4m10s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [4m20s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [4m30s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [4m40s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [4m50s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [5m0s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [5m10s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [5m20s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [5m30s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [5m40s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [5m50s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [6m0s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [6m10s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [6m20s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [6m30s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [6m40s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [6m50s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [7m0s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [7m10s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [7m20s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [7m30s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [7m40s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [7m50s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [8m0s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [8m10s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [8m20s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [8m30s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [8m40s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [8m50s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [9m0s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [9m10s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [9m20s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [9m30s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [9m40s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [9m50s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [10m0s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [10m10s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [10m20s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [10m30s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [10m40s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [10m50s elapsed]
module.eks.aws_eks_cluster.this[0]: Creation complete after 10m53s [id=ce5-group6-eks-cluster]
module.eks.aws_ec2_tag.cluster_primary_security_group["Terraform"]: Creating...
module.eks.aws_ec2_tag.cluster_primary_security_group["Environment"]: Creating...
module.eks.data.tls_certificate.this[0]: Reading...
module.eks.time_sleep.this[0]: Creating...
kubernetes_deployment.chatbot: Creating...
kubernetes_deployment.sentiment_analysis: Creating...
module.eks.data.tls_certificate.this[0]: Read complete after 0s [id=99d41e43229a4cdaf4141f3e8310e6d95c31dab9]
module.eks.aws_iam_openid_connect_provider.oidc_provider[0]: Creating...
module.eks.aws_ec2_tag.cluster_primary_security_group["Terraform"]: Creation complete after 2s [id=sg-0072a5fc9eb59079d,Terraform]
module.eks.aws_ec2_tag.cluster_primary_security_group["Environment"]: Creation complete after 2s [id=sg-0072a5fc9eb59079d,Environment]
module.eks.aws_iam_openid_connect_provider.oidc_provider[0]: Creation complete after 2s [id=arn:aws:iam::255945442255:oidc-provider/oidc.eks.us-east-1.amazonaws.com/id/4782E3027C26C44C1601C6AA289306C2]
module.eks.time_sleep.this[0]: Still creating... [10s elapsed]
kubernetes_deployment.sentiment_analysis: Still creating... [10s elapsed]
kubernetes_deployment.chatbot: Still creating... [10s elapsed]
module.eks.time_sleep.this[0]: Still creating... [20s elapsed]
kubernetes_deployment.sentiment_analysis: Still creating... [20s elapsed]
kubernetes_deployment.chatbot: Still creating... [20s elapsed]
module.eks.time_sleep.this[0]: Still creating... [30s elapsed]
module.eks.time_sleep.this[0]: Creation complete after 30s [id=2024-06-02T12:49:45Z]
module.eks.module.eks_managed_node_group["eks_nodes"].module.user_data.null_resource.validate_cluster_service_cidr: Creating...
module.eks.module.eks_managed_node_group["eks_nodes"].module.user_data.null_resource.validate_cluster_service_cidr: Creation complete after 0s [id=44335846188326424]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_launch_template.this[0]: Creating...
kubernetes_deployment.sentiment_analysis: Still creating... [30s elapsed]
kubernetes_deployment.chatbot: Still creating... [30s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_launch_template.this[0]: Creation complete after 2s [id=lt-0e394b2d654de3a7f]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Creating...
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [10s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [20s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [30s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [40s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [50s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [1m0s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [1m10s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [1m20s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [1m30s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [1m40s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [1m50s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [2m0s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [2m10s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [2m20s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [2m30s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [2m40s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [2m50s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [3m0s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [3m10s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [3m20s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [3m30s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [3m40s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [3m50s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [4m0s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [4m10s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [4m20s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [4m30s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [4m40s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [4m50s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [5m0s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [5m10s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [5m20s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [5m30s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [5m40s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [5m50s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [6m0s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [6m10s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [6m20s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [6m30s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [6m40s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [6m50s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [7m0s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [7m10s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [7m20s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [7m30s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [7m40s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [7m50s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [8m0s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [8m10s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [8m20s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [8m30s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [8m40s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [8m50s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [9m0s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [9m10s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [9m20s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [9m30s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [9m40s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [9m50s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [10m0s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [10m10s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [10m20s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [10m30s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [10m40s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [10m50s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [11m0s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [11m10s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [11m20s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [11m30s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [11m40s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [11m50s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [12m0s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [12m10s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [12m20s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [12m30s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [12m40s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [12m50s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [13m0s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [13m10s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [13m20s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [13m30s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [13m40s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [13m50s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [14m0s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [14m10s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [14m20s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [14m30s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [14m40s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [14m50s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [15m0s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [15m10s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [15m20s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [15m30s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [15m40s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [15m50s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [16m0s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [16m10s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [16m20s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [16m30s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [16m40s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [16m50s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [17m0s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [17m10s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [17m20s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [17m30s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [17m40s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [17m50s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [18m0s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [18m10s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [18m20s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [18m30s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [18m40s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [18m50s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [19m0s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [19m10s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [19m20s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [19m30s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [19m40s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [19m50s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [20m0s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [20m10s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [20m20s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [20m30s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [20m40s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [20m50s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [21m0s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [21m10s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [21m20s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [21m30s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [21m40s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [21m50s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [22m0s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [22m10s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [22m20s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [22m30s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [22m40s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [22m50s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [23m0s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [23m10s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [23m20s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [23m30s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [23m40s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [23m50s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [24m0s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [24m10s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [24m20s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [24m30s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [24m40s elapsed]
module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0]: Still creating... [24m50s elapsed]
‚ï∑
‚îÇ Error: Failed to create deployment: Post "https://4782E3027C26C44C1601C6AA289306C2.gr7.us-east-1.eks.amazonaws.com/apis/apps/v1/namespaces/default/deployments": dial tcp 10.0.2.52:443: i/o timeout
‚îÇ
‚îÇ   with kubernetes_deployment.chatbot,
‚îÇ   on k8s.tf line 17, in resource "kubernetes_deployment" "chatbot":
‚îÇ   17: resource "kubernetes_deployment" "chatbot" {
‚îÇ
‚ïµ
‚ï∑
‚îÇ Error: Failed to create deployment: Post "https://4782E3027C26C44C1601C6AA289306C2.gr7.us-east-1.eks.amazonaws.com/apis/apps/v1/namespaces/default/deployments": dial tcp 10.0.2.52:443: i/o timeout
‚îÇ
‚îÇ   with kubernetes_deployment.sentiment_analysis,
‚îÇ   on k8s.tf line 48, in resource "kubernetes_deployment" "sentiment_analysis":
‚îÇ   48: resource "kubernetes_deployment" "sentiment_analysis" {
‚îÇ
‚ïµ
‚ï∑
‚îÇ Error: waiting for EKS Node Group (ce5-group6-eks-cluster:eks_nodes-2024060212494776910000000e) create: unexpected state 'CREATE_FAILED', wanted target 'ACTIVE'. last error: i-08ba90b7833e01341: NodeCreationFailure: Instances failed to join the kubernetes cluster
‚îÇ
‚îÇ   with module.eks.module.eks_managed_node_group["eks_nodes"].aws_eks_node_group.this[0],
‚îÇ   on .terraform/modules/eks/modules/eks-managed-node-group/main.tf line 384, in resource "aws_eks_node_group" "this":
‚îÇ  384: resource "aws_eks_node_group" "this" {
‚îÇ
‚ïµ

ce5-capstone-project/terraform on ÓÇ† feature/ALB-23-CD-Chatbot-app-Api-app-infra-Terraform-staging [$!?] via üêç v3.10.0 (.venv2) via üí† default on ‚òÅÔ∏è  (us-east-1) took 37m3s
‚ùØ






























